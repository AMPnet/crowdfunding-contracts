contract TokenInterface =
    entrypoint balance_of : (address) => (int)

contract Coop =

    datatype event =
        WalletAdded(address)
      | CoopOwnershipChanged(address)
      | TokenSet(TokenInterface)

    record state = {
        owner                      : address,
        activeWallets              : map(address, bool),
        token                      : option(TokenInterface),
        master                     : address,
        claimOwnershipCalled       : bool,
        claimOwnershipEnabled      : bool }
    
    stateful entrypoint init(master: address) : state =
        { owner = Call.origin,
          activeWallets = {},
          token = None,
          master = master,
          claimOwnershipCalled = false,
          claimOwnershipEnabled = false }
    
    stateful entrypoint claim_ownership(newOwner: address) =
        require(state.claimOwnershipEnabled, "#Error: claim ownership feature is disabled. Aborting.#")
        require(!state.claimOwnershipCalled, "#Error: trying to claim ownership more than once. Aborting.#")
        put(state{
            owner = newOwner,
            claimOwnershipCalled = true })
        Chain.event(CoopOwnershipChanged(newOwner))
    
    stateful entrypoint transfer_ownership(newOwner: address) =
        only_owner()
        put(state{ owner = newOwner })
        Chain.event(CoopOwnershipChanged(newOwner))
    
    stateful entrypoint set_token(token: TokenInterface) =
        only_owner()
        switch (state.token)
            Some(token) => abort("#Token already initialized!#")
            None =>
                put(state{ token = Some(token) })
                Chain.event(TokenSet(token))
                
    stateful entrypoint add_wallet(wallet: address) =
        only_owner()
        put(state{ activeWallets[wallet] = true })
        Chain.event(WalletAdded(wallet))

    entrypoint is_wallet_active(wallet: address) : bool = state.activeWallets[wallet = false]

    entrypoint owner() : address = state.owner
    
    entrypoint token() : TokenInterface = 
        switch (state.token)
            None => abort("#Token not initalized!#")
            Some(token) => token

    function only_owner() =
        require(Call.origin == state.owner, "#Only Platform Manager can make this action!#")
